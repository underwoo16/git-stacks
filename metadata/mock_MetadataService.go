// Code generated by mockery v2.38.0. DO NOT EDIT.

package metadata

import mock "github.com/stretchr/testify/mock"

// MockMetadataService is an autogenerated mock type for the MetadataService type
type MockMetadataService struct {
	mock.Mock
}

// CacheExists provides a mock function with given fields:
func (_m *MockMetadataService) CacheExists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConfigExists provides a mock function with given fields:
func (_m *MockMetadataService) ConfigExists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfigExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ContinueInfoExists provides a mock function with given fields:
func (_m *MockMetadataService) ContinueInfoExists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContinueInfoExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetCache provides a mock function with given fields:
func (_m *MockMetadataService) GetCache() Cache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCache")
	}

	var r0 Cache
	if rf, ok := ret.Get(0).(func() Cache); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Cache)
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *MockMetadataService) GetConfig() Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 Config
	if rf, ok := ret.Get(0).(func() Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Config)
	}

	return r0
}

// GetContinueInfo provides a mock function with given fields:
func (_m *MockMetadataService) GetContinueInfo() ContinueInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContinueInfo")
	}

	var r0 ContinueInfo
	if rf, ok := ret.Get(0).(func() ContinueInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ContinueInfo)
	}

	return r0
}

// RemoveContinueInfo provides a mock function with given fields:
func (_m *MockMetadataService) RemoveContinueInfo() {
	_m.Called()
}

// StoreContinueInfo provides a mock function with given fields: branch, branches
func (_m *MockMetadataService) StoreContinueInfo(branch string, branches []string) {
	_m.Called(branch, branches)
}

// UpdateCache provides a mock function with given fields: cache
func (_m *MockMetadataService) UpdateCache(cache Cache) {
	_m.Called(cache)
}

// UpdateConfig provides a mock function with given fields: config
func (_m *MockMetadataService) UpdateConfig(config Config) {
	_m.Called(config)
}

// NewMockMetadataService creates a new instance of MockMetadataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadataService {
	mock := &MockMetadataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
