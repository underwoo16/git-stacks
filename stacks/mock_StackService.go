// Code generated by mockery v2.38.0. DO NOT EDIT.

package stacks

import mock "github.com/stretchr/testify/mock"

// MockStackService is an autogenerated mock type for the StackService type
type MockStackService struct {
	mock.Mock
}

// CacheGraphToDisk provides a mock function with given fields: trunk
func (_m *MockStackService) CacheGraphToDisk(trunk *StackNode) {
	_m.Called(trunk)
}

// CreateStack provides a mock function with given fields: name, parent, parentRefSha
func (_m *MockStackService) CreateStack(name string, parent string, parentRefSha string) {
	_m.Called(name, parent, parentRefSha)
}

// GetCurrentStackNode provides a mock function with given fields:
func (_m *MockStackService) GetCurrentStackNode() *StackNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentStackNode")
	}

	var r0 *StackNode
	if rf, ok := ret.Get(0).(func() *StackNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StackNode)
		}
	}

	return r0
}

// GetGraph provides a mock function with given fields:
func (_m *MockStackService) GetGraph() *StackNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGraph")
	}

	var r0 *StackNode
	if rf, ok := ret.Get(0).(func() *StackNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StackNode)
		}
	}

	return r0
}

// NeedsSync provides a mock function with given fields: stack
func (_m *MockStackService) NeedsSync(stack *StackNode) bool {
	ret := _m.Called(stack)

	if len(ret) == 0 {
		panic("no return value specified for NeedsSync")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*StackNode) bool); ok {
		r0 = rf(stack)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockStackService creates a new instance of MockStackService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStackService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStackService {
	mock := &MockStackService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
