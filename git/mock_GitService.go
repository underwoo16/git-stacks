// Code generated by mockery v2.38.0. DO NOT EDIT.

package git

import mock "github.com/stretchr/testify/mock"

// MockGitService is an autogenerated mock type for the GitService type
type MockGitService struct {
	mock.Mock
}

// BranchExists provides a mock function with given fields: branch
func (_m *MockGitService) BranchExists(branch string) bool {
	ret := _m.Called(branch)

	if len(ret) == 0 {
		panic("no return value specified for BranchExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(branch)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckoutBranch provides a mock function with given fields: branch
func (_m *MockGitService) CheckoutBranch(branch string) {
	_m.Called(branch)
}

// Commit provides a mock function with given fields:
func (_m *MockGitService) Commit() {
	_m.Called()
}

// CommitAmend provides a mock function with given fields:
func (_m *MockGitService) CommitAmend() {
	_m.Called()
}

// CreateAndCheckoutBranch provides a mock function with given fields: branch
func (_m *MockGitService) CreateAndCheckoutBranch(branch string) {
	_m.Called(branch)
}

// CreateHashObject provides a mock function with given fields: filepath
func (_m *MockGitService) CreateHashObject(filepath string) string {
	ret := _m.Called(filepath)

	if len(ret) == 0 {
		panic("no return value specified for CreateHashObject")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(filepath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DirectoryPath provides a mock function with given fields:
func (_m *MockGitService) DirectoryPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DirectoryPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ForcePushBranch provides a mock function with given fields: branch
func (_m *MockGitService) ForcePushBranch(branch string) {
	_m.Called(branch)
}

// GetCurrentBranch provides a mock function with given fields:
func (_m *MockGitService) GetCurrentBranch() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentBranch")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCurrentSha provides a mock function with given fields:
func (_m *MockGitService) GetCurrentSha() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSha")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogBetween provides a mock function with given fields: from, to
func (_m *MockGitService) LogBetween(from string, to string) string {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for LogBetween")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(from, to)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PassThrough provides a mock function with given fields: args
func (_m *MockGitService) PassThrough(args []string) {
	_m.Called(args)
}

// PushBranch provides a mock function with given fields: branch
func (_m *MockGitService) PushBranch(branch string) {
	_m.Called(branch)
}

// Rebase provides a mock function with given fields: trunk, branch
func (_m *MockGitService) Rebase(trunk string, branch string) error {
	ret := _m.Called(trunk, branch)

	if len(ret) == 0 {
		panic("no return value specified for Rebase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(trunk, branch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RebaseContinue provides a mock function with given fields:
func (_m *MockGitService) RebaseContinue() {
	_m.Called()
}

// RevParse provides a mock function with given fields: ref
func (_m *MockGitService) RevParse(ref string) string {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for RevParse")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Show provides a mock function with given fields: thing
func (_m *MockGitService) Show(thing string) string {
	ret := _m.Called(thing)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(thing)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateRef provides a mock function with given fields: ref, sha
func (_m *MockGitService) UpdateRef(ref string, sha string) {
	_m.Called(ref, sha)
}

// NewMockGitService creates a new instance of MockGitService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitService {
	mock := &MockGitService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
